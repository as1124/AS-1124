package com.as1124.ch14test.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "country".
*/
public class CountryDao extends AbstractDao<Country, Long> {

    public static final String TABLENAME = "country";

    /**
     * Properties of entity Country.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CountryName = new Property(1, String.class, "countryName", false, "name");
        public final static Property WeatherId = new Property(2, String.class, "weatherId", false, "weather_id");
        public final static Property CityId = new Property(3, Long.class, "cityId", false, "city_id");
    }

    private Query<Country> city_CountriesQuery;

    public CountryDao(DaoConfig config) {
        super(config);
    }
    
    public CountryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"country\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"name\" TEXT NOT NULL ," + // 1: countryName
                "\"weather_id\" TEXT NOT NULL ," + // 2: weatherId
                "\"city_id\" INTEGER);"); // 3: cityId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"country\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Country entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCountryName());
        stmt.bindString(3, entity.getWeatherId());
 
        Long cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindLong(4, cityId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Country entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCountryName());
        stmt.bindString(3, entity.getWeatherId());
 
        Long cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindLong(4, cityId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Country readEntity(Cursor cursor, int offset) {
        Country entity = new Country( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // countryName
            cursor.getString(offset + 2), // weatherId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // cityId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Country entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCountryName(cursor.getString(offset + 1));
        entity.setWeatherId(cursor.getString(offset + 2));
        entity.setCityId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Country entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Country entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Country entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "countries" to-many relationship of City. */
    public List<Country> _queryCity_Countries(Long cityId) {
        synchronized (this) {
            if (city_CountriesQuery == null) {
                QueryBuilder<Country> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CityId.eq(null));
                city_CountriesQuery = queryBuilder.build();
            }
        }
        Query<Country> query = city_CountriesQuery.forCurrentThread();
        query.setParameter(0, cityId);
        return query.list();
    }

}
